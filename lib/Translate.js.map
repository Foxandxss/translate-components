{"version":3,"sources":["../src/Translate.js"],"names":["Translate","props","context","translations","JSON","parse","defaultLanguage","state","language","window","addEventListener","_changeLanguage","bind","_getText","children","text","event","setState","detail","contextTypes","string"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;IAEMA,S;;;AACJ,qBAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;;AAE1B,UAAKC,YAAL,GAAoBC,KAAKC,KAAL,CAAWH,QAAQC,YAAnB,CAApB;AACA,UAAKG,eAAL,GAAuBJ,QAAQI,eAA/B;AACA,UAAKC,KAAL,GAAa;AACXC,gBAAU,MAAKF;AADJ,KAAb;AAJ0B;AAO3B;;;;wCAEmB;AAClBG,aAAOC,gBAAP,CAAwB,8BAAxB,EAAwD,KAAKC,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAxD;AACD;;;6BAEQ;AACP,aACE;AAAA;AAAA;AAAO,aAAKC,QAAL,CAAc,KAAKZ,KAAL,CAAWa,QAAzB;AAAP,OADF;AAGD;;;6BAEQC,I,EAAM;AACb,UAAI,KAAKR,KAAL,CAAWC,QAAX,IAAuB,KAAKF,eAA5B,IAA+CS,IAAnD,EAAyD;AACvD,YAAI,KAAKZ,YAAL,CAAkBY,IAAlB,KAA2B,KAAKZ,YAAL,CAAkBY,IAAlB,EAAwB,KAAKR,KAAL,CAAWC,QAAnC,CAA/B,EAA6E;AAC3E,iBAAO,KAAKL,YAAL,CAAkBY,IAAlB,EAAwB,KAAKR,KAAL,CAAWC,QAAnC,CAAP;AACD,SAFD,MAEO;AACL,iBAAOO,IAAP;AACD;AACF,OAND,MAMO;AACL,eAAOA,IAAP;AACD;AACF;;;oCAEeC,K,EAAO;AACrB,WAAKC,QAAL,CAAc,EAAET,UAAUQ,MAAME,MAAlB,EAAd;AACD;;;;;;AAIHlB,UAAUmB,YAAV,GAAyB;AACvBhB,gBAAc,oBAAUiB,MADD;AAEvBd,mBAAiB,oBAAUc;AAFJ,CAAzB;;kBAKepB,S","file":"Translate.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Translate extends Component {\n  constructor(props, context) {\n    super()\n    this.translations = JSON.parse(context.translations)\n    this.defaultLanguage = context.defaultLanguage\n    this.state = {\n      language: this.defaultLanguage\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('reactTranslateChangeLanguage', this._changeLanguage.bind(this))\n  }\n\n  render() {\n    return (\n      <span>{this._getText(this.props.children)}</span>\n    )\n  }\n\n  _getText(text) {\n    if (this.state.language != this.defaultLanguage && text) {\n      if (this.translations[text] && this.translations[text][this.state.language]) {\n        return this.translations[text][this.state.language]\n      } else {\n        return text\n      }\n    } else {\n      return text\n    }\n  }\n\n  _changeLanguage(event) {\n    this.setState({ language: event.detail })\n  }\n\n}\n\nTranslate.contextTypes = {\n  translations: PropTypes.string,\n  defaultLanguage: PropTypes.string\n}\n\nexport default Translate\n"]}